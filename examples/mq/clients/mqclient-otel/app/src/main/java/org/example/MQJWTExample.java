/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.util.*;
import java.io.*;
import io.opentelemetry.instrumentation.annotations.WithSpan;

import javax.jms.*;

import com.ibm.msg.client.jms.JmsConnectionFactory;
import com.ibm.msg.client.jms.JmsFactoryFactory;
import com.ibm.msg.client.wmq.WMQConstants;

import java.net.URI;
import java.net.http.*;
import java.net.http.HttpRequest.BodyPublishers;

import org.json.JSONObject;

public class MQJWTExample {

	//@WithSpan()
	public static void callMq() throws Exception {
        
		// Set the truststore to a store containing the MQ server certificate, after calling the token endpoint
		// which uses a cert from a well-known CA. 
		
		System.setProperty("com.ibm.mq.cfg.SSL.outboundSNI", "HOSTNAME");
	  	System.setProperty("javax.net.ssl.trustStore", getLocalProperty("truststoreLocation"));
        System.setProperty("javax.net.ssl.trustStorePassword", getLocalProperty("truststorePassword"));

		JmsConnectionFactory cf = createConnectionFactory(
			getLocalProperty("queueManagerHost"), 
			getLocalProperty("queueManager"), 
			getLocalProperty("channel"));

		try (JMSContext context = cf.createContext(null, null)) {
			String queueName = getLocalProperty("queue");
			Destination destination = context.createQueue("queue:///" + queueName);

			TextMessage message = context.createTextMessage("Test message: " + new Date().toString());

			JMSProducer producer = context.createProducer();
			producer.send(destination, message);

			System.out.println("Sent message to Queue");

			// JMSConsumer consumer = context.createConsumer(destination);
			// String body = consumer.receiveBody(String.class, 5000);

			// System.out.println("Message body: " +  body);
		} 
	}

	private static JmsConnectionFactory createConnectionFactory(String mqHostName, String queueManager, String channel) throws JMSException {

		JmsFactoryFactory ff = JmsFactoryFactory.getInstance(WMQConstants.WMQ_PROVIDER);
		JmsConnectionFactory cf = ff.createConnectionFactory();

		cf.setStringProperty(WMQConstants.WMQ_HOST_NAME, mqHostName);
		cf.setIntProperty(WMQConstants.WMQ_PORT, 443);

		cf.setStringProperty(WMQConstants.WMQ_QUEUE_MANAGER, queueManager);
		cf.setStringProperty(WMQConstants.WMQ_CHANNEL, channel);
		cf.setStringProperty(WMQConstants.WMQ_SSL_CIPHER_SUITE, "*TLS12ORHIGHER");
		cf.setIntProperty(WMQConstants.WMQ_CONNECTION_MODE, WMQConstants.WMQ_CM_CLIENT);
		cf.setStringProperty(WMQConstants.WMQ_APPLICATIONNAME, "TestClient");
		cf.setBooleanProperty(WMQConstants.USER_AUTHENTICATION_MQCSP, true);

		return cf;
	}

	public static String getLocalProperty(String key) throws IOException {
		return getLocalProperties().get(key).toString();
	}

	private static Properties getLocalProperties() throws IOException {
		Properties properties = new Properties();
		InputStream is = MQJWTExample.class.getResourceAsStream("/local.properties");
		properties.load(is);
		return properties;
	}

	public static void main(String[] args) {
		try {
			callMq();
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
	}
}
