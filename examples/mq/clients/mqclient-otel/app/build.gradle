/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.7/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id("com.ryandens.javaagent-otel-modification") version "0.7.0"
    id("com.ryandens.javaagent-application") version "0.7.0"
    id("com.ryandens.javaagent-test") version "0.7.0"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    otel("io.opentelemetry.javaagent:opentelemetry-javaagent:2.11.0")
    otelExtension("io.opentelemetry.contrib:opentelemetry-samplers:1.42.0-alpha")

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'io.opentelemetry.javaagent:opentelemetry-testing-common:2.11.0-alpha'
    testImplementation 'io.opentelemetry.javaagent:opentelemetry-agent-for-testing:2.11.0-alpha'

    //testJavaagent("io.opentelemetry.javaagent:opentelemetry-javaagent:2.11.0")

    // This dependency is used by the application.
    implementation libs.guava

    implementation 'com.ibm.mq:com.ibm.mq.allclient:9.4.1.1'

    implementation('io.opentelemetry.instrumentation:opentelemetry-instrumentation-annotations:2.11.0')
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

[tasks.distTar, tasks.distZip, tasks.startScripts, tasks.test].forEach {
  it.configure {
    dependsOn(tasks.extendedAgent)
  }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.MQJWTExample'
}

jar {
  manifest { 
    attributes "Main-Class": 'org.example.MQJWTExample'
  }  

  from {
    configurations.runtimeClasspath.collect {
      if (it.name.contains("jms") || it.name.contains("mq") || it.name.contains("json")) {
        zipTree(it)
      }
    }
  }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

sourceSets {
  main {
    output.resourcesDir = "build/classes/java/main"
  }
}

test {
    jvmArgs = [
        //"-javaagent:./opentelemetry-javaagent.jar",
        "-Dotel.instrumentation.jms.enabled=true",
        "-Dotel.exporter.otlp.endpoint=http://localhost:4317",
        "-Dotel.javaagent.enabled=true",
        //"-Dotel.javaagent.debug=true",
        "-Dotel.exporter.otlp.protocol=grpc",
        "-Dotel.metrics.exporter=none",
        "-Dotel.logs.exporter=none",
        "-Dotel.traces.exporter=otlp",
        "-Dotel.traces.exporter.otlp.protocol=grpc",
        "-Dotel.resource.attributes=service.name=javaPut"
    ]
	testLogging {
		events "PASSED", "SKIPPED", "FAILED", "STANDARD_OUT", "STANDARD_ERROR"
	}
}
